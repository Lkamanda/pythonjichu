# 结构化文件存储
- xml,json
- 为了解决不同设备之间的信息交换问题
- xml文件
- 参考文件
    - http://www.runoob.com/python/python-xml.html
    - https://blog.csdn.net/seetheworld518/article/details/49535285
- XML(eXtensibelMarkupLanguage),可扩展的标记语言
    - 标记语言:语言中使用尖括号括起来的文本字符串标记
    - 可扩展:用户可以自己定义需要的标记
        - 
            <Teacher>
                自定义标记Teacher
                在俩个标记之间任何内容都应该跟Teacher先关
            </Teacher>
    - 是w3c组织制定的一个标准
    - XML描述的是数据本身,即数据的结构的语义
    - HTML 侧重于任何显示web页面的数据

- XML文档的结构
    - 处理指令(可以认为一个文件内只有一个处理指令)
        - 最多只有一行
        - 且必须在第一行
        - 内容是与xml本身处理相关的一些生命或者指令
        - 以xml关键字开头
                - 一般用于声明XML的版本和采用
                    - version 属性是必须的
                    - encoding属性用来支出xml解释器使用的编码
    - 根元素(一个文件内只有一个根元素)
        -  在整个xml文件中,可以吧它看做一个树性结构
        -  只有一个根元素
    - 子元素
    - 属性
        - 每个元素都可有自己的属性
    - 内容
        - 表明标签所储存的信息
    - 注释
        - 起说明作用的信息
        - 注释不能嵌套在标签里
        - 只有在注释的开始和结尾使用双等横线
        - 三短横线只能出现在注释的开头而不能用在结尾
        - 注释中使用单短横线
            
            <name> <!-- wangdapeng --> </name> 
            <name><!-- wang-da-peng -- > </name>
            <name><!---wang-da-a--> </name>
    - 保留字符的处理
        - XML中使用的符号可能跟实际符号冲突 > <
        - 使用实体引用(EntiyReFrence)来表示保留字符
                
                <score> score>80 </score>    #有错误,xml中不能出现
                <score> score&gt;80 </score> # 使用实体引用
        - 把含有保留字符的部分放在CDATA内部,CDATA块内部信息视为不需要转移
                - 相当于字符串中 -r
                <![CDATA[
                    select name, age
                    from student
                    where score > 80
                ]]>   
        - 常见的需要转意的保留字符和对应实体引用
            - & : &amp:
            - < : &lt:
            - > : &gt:
            - ' : &apos:
            - " : &quot:
            - 一共五个,每个实体引用都以&开头并且以分号结尾
            
- xml标签的命名规则
    - Pascal命名规则
    - 用单词表示,第一个字母大写
    - 大小写严格区分
    - 配对的标签必须一致
    
- 命名空间
    - 为了防止命名冲突
            <Student>
                <name>xiaolin</name>
                <age>22</age>
            <Student>
            <Room>
                <name>12</name>
                <local>北京</local>
            </Room>
        
    - 如果归并上述俩个内容信息,会产生冲突
    
    - 为了避免冲突,需要给可能冲突元素添加命名空间
        - xmlns: xml name space的缩写
              - 定义命名空间uri  
             <Schooler xmls:student="http://my_student"  xmlns:room="http://my_room">
                <student:Name>xiaolin</student:Name>
                <student:age>23</student:age> 
                <room:Name>12</room:Name>
                <room:Local>北京</room:Local>
             </Schooler>

# XML 访问
## 读取 
- XML读取分俩个技术,SAX, DOM
- SAX(Simple API for XML )
    - 基于事件驱动API
        - 利用SAX解析文档设计到解析器和事件处理俩部分
    - 特点:
        - 快
        - 流式读取
- DOM:
    - 是w3c规定的XML编程接口
    - 一个xml文件再缓存中以任何形式结构保存在读取
    - 用途
        - 定位浏览XML任何一个节点信息
        - 添加删除相应内容
    - minidom
        - minidom.parse(filename):加载读取xml文件,filename也是可以xml代码
        - doc.documentElement:获取xml文档对象,一个xml文件只有一个对于的文档对象
        - node.getAttributeElement(attr_name):获取xml节点的属性值
        - node.getElementByTagName(tag_name):得到一个节点对象的集合
        - node.childNode:得到所有孩子的子节点
        - node.childNode[index].nodeValue:获取单个节点的值
        - node.firstNode:得到第一个节点,等价于node.childNode[0]
        - node.attributes[tag_name]
        - 案例01
    - etree
        -  import xml.tree.ElementTree
        -  以树形结构来表示xml
        -  root.getiterator:得到相应的可迭代的node集合
        - root.iter
        - find（node_name):查找制定node_name的节点，返回一个node
        - root.findAll(node_name):返回多个node_name的节点
        - node.tag:node对应的tagename
        - node.text:node的文本值
        - node.attrib: 是node的属性的字典类型的内容

- xml 文件写入
    - 更改 
        - ele.set:修改属性
        - ele.append:添加元素
        - ele.remove:删除
            - 案例03
    - 生成创建
        - SubElement,创建子元素
            - 案例04
        - minidom 
            - 案例 05 
        - etree 写入
            - 06