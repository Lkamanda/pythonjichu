# 网络编程
- 网络: 
- 网络协议: 一套规则
- 网络模型:
     - 七层模型: 
         - 物理层
         - 数据链路层
         - 网络层
         - 传输层
         - 回话层
         - 表示层
         - 应用层
     - 四层模型- 实际应用
        - 链路层
        - 网络
        - 传输层
        - 应用层
- 每一层都有相应的协议负责交换信息或者协同工作
- TCP /IP 协议族
- IP地址: 负责在网络上唯一定位一个机器
    - IP地址分ABCDE类
    - 是由四个数字段组成，没个数字段的取值是0-256
    - 192.168.xxx.xxx：局域网ip
    - 127.0.0.1: 本机
    - IPV4, IPV6

- 端口
    - 范围： 0-6553
        - 知名端口：0-1023 
        - 非知名端口：1024-
# 协议UDP/TCP
 - UDP: 非安全的不面向连接的传输
    - 即时通信，消息不多
    - 安全性差
    - 大小限制64kb
    - 没有顺序
    - 速度快
- TCP: 
    - 基于连接的通信

- SOCKET编程
    - socket (套接字): 是一个网络通信的端点，能实现不同主机的进程通信
    - 通过IP+端口定位对方并发送消息的通信机制
    - 分为UDP,TCP
    - 客户端Client: 发起请求端
    - 服务端Server: 接受请求并反馈
- UDP 编程
   - Sever 端流程
            1. 建立socket,socket时负责具体通信的一个实例
            2. 绑定，为创建socket指派固定的端口和ip地址
            3.接受对方发送的内容
            4.给对方发送反馈，此步骤为非彼必须步骤
   - v01
   - Client 端流程
            1.建立通信的socket
            2.发送内容到指定服务器
            3.接受服务器给定的反馈内容
   - v02
   - 服务器程序要永远运行,一般用死循环处理
   - 改造的服务器版本v03

- TCP编程
    - 面向连接的传输, 即每次传输之前需要建立一个连接
    - 客户端和服务器端俩个程序需要编写
    - Server 端编写流程
        1. 建立socket负责具体通信,这个socket其实只负责接受对方的请求
        2. 绑定端口和地址
        3. 监听介入的访问socket
        4. 接受访问socket,可以理解接受访问建立一个通讯的链接通道
        5. 接受对方的发送内容,利用收到的socket接收内容
        6.如果必要,给对方发送反馈信息
        7.关闭链接通路
    - Client 端流程
        1.建立socket 
        2.链接对,请求跟对方建立通路
        3.发送内容到对方服务器
        4.接受对方的反馈
        5.关闭链接通路
         
    - 案例04 tcp_server
    - 案例05 tcp_client
    
# FTP编程 
- FTP (FileTransferProtocal)文件传输协议
- 用途:定制一些特殊的上传下载文件的服务
- 用户分类: 登录FTP服务器必须有一个账号
    - Real 账户: 注册账号
    - Guest 账户: 可以临时对某一类人的行为进行授权
    - Anonymous匿名账户: 匿名账户,允许任何人
        
- FTP 工作流程
ftp -> 21 server 
    <- 20 server 
        1. 客户端连接远程服务器
        2. 客户端输入用户名和密码(或者"anonymous"和点有点地址)
        3. 客户端和服务器进行各种文件传输和信息查询操作
        4. 客户端从远程FTP服务器退出,结束传输
        
- FTP文件表示 
    - 分三段表示FTP服务器上的文件
    - HOST: 主机地址,类似于ftp.mozila.org ,以ftp开头
    - DIR: 目录,表示文件所在的路径,例如pub/android/focus
    - File: 文件名称
    - 如果想完整精确表示ftp 上某一个文件,需要上述三个部分组合在一起
    - 案列06 
        - ftplib 

# Mail 编程
## 电子邮件历史 
- 起源 
    - 1969 leonard k. 教授发给同事"LO"
    - 1971 美国国防部的阿帕网(Arpanet)的通讯机制
    - 通讯地址里用@, 
    - 1987 年中国的第一份电子邮件
    "Across the Great wall we can reach every corner in the world "
- 管理程序
    - Euroda 使邮件普及
  ``  - Netscape , outlook ,forxmail 后来居上
    - Hotmail 使用浏览器发送邮件
- 参考资料
    - [官网](https://docs.python.org/3/library/email.html)
 
## 邮件工作流程
- MUA(MailUserAgent)邮件用户代理
- MTA(MailTransferAgent)邮件传输代理
- MDA(mailDeliveryAgent)邮件投递代理
- 流程
    1. MUA-> 邮件已经在服务器上了
    2. qq MTA ->......-> sina MTA,邮件在新浪服务器上
    3. sina MTA - > sina MDA, 此时邮件在你的邮箱里
    4. sinaMDA -> MUA(Foxmail/Outlook), 邮件下载到本地电脑

- 编写程序
    - 发送: MUA -> MTA with SMTP :Simple MailTransferProtocal,包括MTA-> MTA
    # 简单邮件传输协议: Simple MailTransferProtocal
    - 接受: MDA ->MUA  with POP3 andIMAP:PostoffcieProtaocal v3 

- 准备工作
    - 注册邮箱:以qq邮箱为例
    - 第三方邮箱需要特殊设置,以qq邮箱为例
        - 进入设置中心
        - 取得授权码
        - brstblwhkklkghei
- Python for mail 
    - SMTP协议负责发送邮件
        - 使用email 模块构建邮件
            - 纯文本邮件
                - v07
            - HTML格式邮件发送
                - 准备HTML代码作为内容
                - 把邮件的subtype设置为html
            - 发送带附件的邮件
                - 可以吧邮件看作是一个文本邮件和一个附件的复合体
                - 一份邮件如果涉及多个部分,需要使用MIMEMultipart格式构建
                    - 添加一个MIMEText 正文
                    - 添加一个MIMEBase或者MEMEText作为附件
                    - 案例v08
        - 使用smtplib发送邮件
        -添加邮件头,抄送等信息
            - mail["From"]表示发送信息,包扣姓名和邮件
            - mail ["To"]表示接收者信息,包扣姓名和邮件地址
            - mail ['subject']表示摘要或者主题信息
            - 案例v09
    - POP3协议接受邮件