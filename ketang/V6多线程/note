# 线程
- 伪多线程
- xubuntu   16.04 
- anaconda     
- python3.6
- pycharm
-https://www.cnblogs.com/jokerbj/p/7460260.html

# 多线程 vs 多进程
- 程序:一堆代码以文本形式存入一个文档
- 进程: 程序运行的一个状态
    - 包含地空间,内存,数据栈等
    - 程序的一个运行
    - 每个进程由自己完全独立的运行状态,多进程共享数据是一个问题
- 线程
    - 一个进程的独立运行片段,一个进程可以有多个线程
    - 轻量化的进程
    - 一个进程多个现成共享数据和上下文运行环境
    - 共享互斥
- 全局解释器锁(GIL)
    - Python代码的执行有python虚拟机进行控制
    - 在主循环中只能有一个控制线程在执行
- 提高了资源的利用率

- python 包
    - thread 有问题,不好用  python3改成了_thread 
    - threading 现在使用 
    - 案例 01 顺序执行耗时比较长
    - 案例 02 改用多线程,缩短总时间,_thread
    - 案例 03 多线程传参数 _thread
- threading的使用
    - 直接使用threading.Thread生成Thread实例
        1.t = threading.Thread(target==xxx, args=(xxx,))
        2.t.start():启动多线程
        3.t.join(): 等待多线成执行完成
        4.案例04 threading 包的多线程
    - 守护线程 -daemo
         - 如果在程序中叫子线程设置成守护线程,则子线程会在主线程结束的时候会自动退出
         - 一般认为,守护线程不重要或者不润徐离开线程独立运行
         - 守护线程案例能否有效果跟环境相关
         - 案例05 未使用守护线程  :主线程结束,子线程继续运行
         - 案例06  守护线程 :主线程结束子线程kill
            - t1 = threading.Thread(target=fun, args=())
              t1.setDaemon(True)
    - 线程常用属性
        - threading.currentThread:返回当前线程变量
        - threading.enumerate:返回一个包含正在运行的线程的list,正在运行的线程指的是线程启动后
        - threading.activeCount: 返回正在运行的线程数量,效果len(threading.enumerate)
        - thr.setName:给线程设置名字
        - thr.getName:得到线程名
    - 直接集成自threading.Thread
        - 直接集成Thread
        - 重写其中run函数
        - 类实例可以直接运行
        - 案例08 创建多线程threading.Thread方法,需重写run方法
        - 案例09 多线程工业方案
- 共享变量
    - 共享变量:当多个变量同时访问一个变量的时候,会产生冲突,即共享变量问题.
    - 案例10
    - 解决共享变量: 锁,信号灯
    - 锁 (Lock):
        - 是一个标志,表示线程在占用一些资源
        - 使用方法
            - 上锁
            - 使用共享资源,放心的用
            - 取消锁,释放资源
        - 案例11  解决共享变量问题使用锁
            - 创建锁的实例
                - lock = threading.Lock()
            - 对多线程共享资源 ,进行上锁
                - lock.acquire
            - 共享资源使用完成解锁
                - lock.release()
        - 理解锁: 锁其实是一个令牌,只有拿到令牌的线程才有资格去访问锁,其他的排队
    - 线程安全问题:
        - 如果一个在资源/变量,他对于多线程来讲,不用枷锁也不会引起任何问题,则称为线程安全
        - 线程不安全变量类型:  list  set dict
        - 线程安全变量类型: queue 队列
    - 生产者消费者问题
        - 一个模型,可以用来搭建消息队列
        - 案例12 生产者和消费者问题
    - queue
        - 是一个用来存放变量的数据结构,特点是先进先出,内部元素排队,可以理解成一个特殊的list
        - 返回队列长度
            - queue.qsize()
        - 把数据放入队列中
            - queue.put(参数)
        - 从队列里取数据
            - queue.get()
    - 死锁问题
        - 案例 13
    - 死锁问题解决
        - 案例 14 死锁问题解决
            - 在申请锁的时候加入timeout:设置一个最长等待时间
            - 加入判断,如果申请不到锁,进行处理
            
    - semphore  信号灯
        - 解决互斥资源问题
        - 允许一个资源最多由几个线程同时使用
        - 案例v15
            - 设置最多允许3个进程
                - semaphore = threading.Semaphore(3)
            - 
            
    - threading.Timer
        - 案例v16
        - 设置6秒钟后开始进程
            - t = threading.Timer(6,func)
        - Timer是利用多线程,在指定时间启动一个工功能
        
    - 可以重入锁
        - 一个锁可以被一个进程多次申请
        - 主要解决递归调用的时候,需要申请锁的情况
        - 案例v17 : RLock()
            - mutex = threading.RLock()
    
# 线程代替方案
- subprocess
    - 完全跳过线程,使用进程
    - 是派生进程的主要代替方案
    - python2.4后进入
- multiprocessing 
    - 使用threading 接口派生,使用子进程
    - 允许为多核或者多cpu派生进程,接口跟threading 非常相似
    - python 2.6

- concurrent.futures
    - 新的异步执行模块
    - 任务级别的操作
    - Python 3.2 后引入
# 多进程
- 进程间通讯(InternprocessCommunication , IPC)
- 进程之间无任何共享状态
- 进程的创建
    - 案例 V18 
    - 直接生成Process实例对象
        -  p = multiprocessing.Process(target=clock, args=(5, ))

    - 案例V19
        - 衍生一个子类创建进程

- 在os中查看pid. ppid以及他们的关系
    - pid 进程的id
    - ppid 父进程id          
    - 案例20
        - 得到运行函数名称
            - __name__
        - 得到父进程id
            - os.getppid()
        - 得到进程本身id
            - os.getpid()   
            
- 生产者消费者模型
    - 进程实现
    - queue(队列)
        - work1                         消费者1
        - work2                         消费者2
        - workn --- 仓库(queue)    ----  消费者n
                    -FIFO(first in first out)    
    
    - JoinableQueue
    - 案例 V21
        - q = multiprocessing.JoinableQueue()
    
    - 队哨兵的使用
        - 案例V22    
            - 在队列里加入哨兵
            - 在消费者里加入判断
        -  哨兵的改进
            - 案例 V23
                - 假定有多个消费者
                
      
    