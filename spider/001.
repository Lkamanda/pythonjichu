# 0 爬虫准备工作
- 参考资料
    - python 网络数据采集,图灵工业出版
    - 精通python爬虫框架Scrapy,人民有点出版社
    -python3网络爬虫(https://blog.csdn.net/c406495762/article/details/72858983)
    - Scrapy官方教程
- 前提知识
    - url 
    - http协议
    - web前段,html,css,js
    -ajax
    -re,xpath
    -xml
# 1.爬虫简介
- 爬虫定义:网络爬虫(又称为网页蜘蛛,网络机器人,在FOAF社区,更经常的称为网页追逐者)
是一种按照一定规划,自动地抓取万维网信息的程序或脚本
另外一些不常使用的名字还有蚂蚁自动索引,模拟程序或者蠕虫
- 俩大特征
    - 能按作者要求下载数据或内容
    - 能自动在网络上流窜
- 三大工作步骤
    - 下载信息(网页)
    - 提取正确信息
    - 根据一定规则自动调到另外的网页上执行上俩步内容
- 爬虫分类
    - 通用爬虫
    - 专用爬虫(聚焦爬虫)
- Python 网络包简介
    - python 2.x: 
    - python 3.x:urllib,urllib3,httplib2,requests
        -urllib,requests

# 2.urllib 
- 包含模块
    - urllib.request:打开和读取urls
    - urllib.error :包含urllib.request 产生的常见错误 - 使用try捕捉
    - urllib.parse:包含解析url的方法
    - urllib.robotparse:解析robots.txt文件
    - 案例 v1
    
- 网页编码问题解决
    - chardet 可以自动检测页面文件的编码格式,但是可能有误
    - 需要安装 .conda install chardet 
    - 案例V2
   
- urlopen的返回对象
    - 案例v3
    - geturl: 返回请求对象的url
    - info: 请求反馈对象的meta信息
    - getcode :返回的http code 
- request.data 的使用
    - 访问网络的两种方法
        - get :利用参数给服器传递信息
            - 参数为dict,然后用parse编码(统一用parse处理一遍)
            - -案例V4    
        - post
            - 利用参数向服务器传递信息
            - post是把信息自动机密处理
            - 我们如果想使用post信息,需要用到data参数
            - 使用post 意味者HTTP的请求头可能需要更改:
                - Content-Type: applocation/x-www.form-urlencode
                - Content-Length:数据长度
                - 简而言之,一旦更改请求方法,请注意其他请求头部信息相适应
            - urllib.parse.urlencode 可以将字符串自动转换成上面的
            - 案例V5      
            - 为更多的设置请求信息,淡村的通过urlopen函数已经不太好用了
            - 需要利用request.Request 类 (模拟求情了类)
            - 案例V6

- urllib.error
    - URLError 产生原因:
        - 没网
        - 服务器连接失败
        - 找不到指定服务器
        - OSError的子类
        - 案例V7
    
        -HTTPError,是URLError的一个子类
            -先处理子类再处理父类
            - 案例V8
    - URLError 和HTTPError的区别
        - HTTPError是对应的HTTP请求的返回码错误
           - 如果 Status Code(返回码) 大于400以上的,则引发HTTPError
        - URLError 对应的一般是网络出现问题,包括url问题
        -关系区别:
        OSEorror - URLError  - HTTPError

- UserAgent() 根据UserAgent判断身份
   - UserAgent : 用户代理,简称UA, 属于heads的一部分,服务器通过UA来判断访问者身份
   - 常见的UA值, 使用的时候可以直接赋值粘贴, 可以用浏览器访问的时候抓包
            
            1.Android
            
            
            2.Firefox
            
            3.linux chrome
    User-Agent:Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.119 Safari/537.36
            
            4. windows chrome
    User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36


- 设置UA可以通过俩种方式
    - headers    对其设置
        - headers={}
          heeaders['User-Agent']=''
          req = request.Request(url,headers)
        - 案例V10
    - add_header  调用函数
        - (self, key, value)
        - req = request.Request(url)
          req.add_header(key,value)
        - 案例 V10
- ProxyHandler处理(代理服务器)     
    - 使用代理IP,是爬虫的常用手段
    - 获取代理服务器的地址:
        - www.xicidaili.com  
        - goubanjia.com
    - 代理使用来隐藏真是访问,代理也不允许频繁访问某一个固定网站,所以,代理一定要大量
    - 基本使用代理:
        1. 设置代理地址
        2. 创建ProxyHandle
        3. 创建Opener
        4. 安装Opener
    - 案例V11
        -url = ''
        proxy = {'http':'代理IP'}
        proxy_handler = request.ProxyHandler(proxy)
        opener = request.build_opener(proxy_handler)
        request.install_opener(opener)

- cookie  & session 
    - 由于http协议的无记忆性,人们为了弥补这个缺憾,所采用的一个补充协议
    - cookie 是发放给用户(即http浏览器) 的一段信息
    - session是保存在服务器上的对应的另一半信息,用来记录用户信息
- cookie 和session的区别
    - 存放位置不同
    - cookie 不安全
    - session会保存在服务器上一定时间,会过期
    - 单个cookie保存数据不允许超过4k,很多浏览器限制一个站点最多保存20个
- session的存放
    - 存在服务器端
    - 一般情况,session是放在内存中或者数据库中
    - 没有Cookie登录 v12 ,可以看到没使用cookie则反馈网页未登录状态

- 使用Cookie登录
    - 直接把Cookie复制下来,然后手动放入请求头,案例 V13
    -http模块: (python自带)包含一些关于cookie的模块,通过他们我们可以自动使用cookie
        - CookieJar
            -管理存储Cookie,向传出http请求添加Cookie
            -Cookie存储在内存中,CookieJar实则回收后Cookie将消失
        - FileCookieJar(filename,delayload=None,policy=None):
            - 使用文件管理cookie 
            - filename是保存cookie的文件       
        - LwpCookieJar(filename, delayload=None, policy=None)
            - 创建与libwww-perl标准兼容的Set-Cookie3格式的FileCookieJar实例
        - MozillaCookieJar(filename, delayload=None, policy=None)
            - 创建于mocilla浏览器cookie.txt兼容的FileCookieJar实例
    - 它们的关系是:Cookie --> FileCookieJar ->> MozillaCookieJar & LwpCookieJar
    - 利用CookieJar访问人人网 -V14
        - 自动使用cookie登录,大致流程:
            - 打开登录页面自动通过用户名密码登录
            - 自动提取反馈回来的cookie
            - 利用提取的cookie登录隐私页面
    - handler 是Handerler的实例,常用的参照案例代码
        - 用来处理复杂请求:
          
            # 生成cookie的管理器
            cookie_handler =request.HTTPCookieProcessor(cookies)
            # 创建http请求管理器
            http_handler = request.HTTPHander()
            # 创建https管理器
            https_handler = request.HTTPSHandler()
            
    - 创立handler后,使用opener打开,打开后相应的业务由相应的handler处理
    - cookie 作为一个变量打印出来 案例V14
        - cookie 的属性
            - name:名称
            - value: 值
            - domain : 可以访问次cookie的与名
            - path: 可以访问此cookie的页面路径
            - expires:过期时间
            - size: 大小
            - HTTP字段 
    - cookie的保存 - FileCookieJar  案例V16
            
            -创建FileCookie实例 :
            filename = 'cookie.txt'
            cookie = cookie.MozillaCookiaJar(filename)
            
            - 保存cookie
            cookie.save(ignore_discard =True, ignore_expiress=True)
            ignore_discard = True : 即使cookie将要被丢弃也保存
            ignore_expiress = True : 表示如果文件中cookie即使已经过期,保存
    -  cookie 的读取 - V17

- SSL
    - ssl证书是值遵守SSL安全套阶层协议的服务器数字证书(SercurSocketLayer)
    - 美国网警公司开发
    - 带有https
    - CA(CertifacateAuthority)是数字证书认证中心,是发放,管理,废除数字证书的收信人的第三方机构
    - 遇到不信任的SSL证书,需要单独处理 -V18
        - 忽略ssl 方法 
            import ssl
            # 利用证书上下文环境替换认证的向下问环境
            ssl._create_default_https_context = ssl._create_unverified_context
             
- js加密
    - 有道反爬虫策略采用js对需要传输的数据进行加密处理(通长是取md5值)
    - 经过加密,传输的就是刘文,但是
    - 加密函数或者过程衣服那个是在浏览器完成,也就是一定会把代码(js代码) 暴露给使用者
    - 通过阅读加密算法,就可以模拟出加密过程从而破解
    - 参照V19
- 加密 :明文 经过一系列算法 -> 密文
    - sort 加入sort 防止利用创建字典反推,加sort
- js格式话网站: http://tool.oschina.net/codeformat/js
    - V19:注释
        - 通过js 网站整理的js 从而得到salt 和 sign的公式
        - 使用python语言实现公式
        - md5 模拟
            # 生成一个md5 实例
            md5 = hashlib.md5()

            md5.update(v.encode('utf-8')
            sign = md5.hexdigest()
        - 使用python 模拟对salt的处理
        - def getSalt()      获得salt
        - def getMD5(sign)  对sign进行MD5处理
        - def getSign(sign,salt)  通过salt 生成对应的salt
            - sign = getSign(sign) 使用 def getMD5 对sign
            - return sign   返回处理玩的sign
        - def yd(k)
            - url
            - salt = getSalt() 最开是就对salt进行获取
            - sign
            - data
                - i : k
                - salt : str(salt)
                - sign ; getSign(key,salt)
            - 对data 进行编码
                - data  = parse.urlencode(data).encode()        # ?????
            - 构建headers ={}
                - 注意 :Content-Length : len(data)
                - 不要 Accept-Encoding":"gzip,deflate
            - 构建 请求
                - req = request.Request(url=url, data=data, headers=headers)
            - 根据构建的请求对目标进行访问
                - rsp = request.urlopen(req)
            - 对得到的html进行读取,译码 
                - html = rsp.read().decode()


             