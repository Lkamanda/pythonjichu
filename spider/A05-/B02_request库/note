# request : HTTP For Human
## 请求方法
### get 请求
- headers 参数 和 params 参数
    import requests 
    kw= {"kw":"小林"}
    response = requests.get(url=url,params = kw, headers=headers) 
    
    - 俩种查看返回信息的方法
        - response.text 
            - 返回的是字符串
        - response.content
            - 返回的是二进制, 字节流
            
### post 请求 (data 参数)
- 登录的时候,提交表单

### 代理
    proxies= {
    "http": "http://171.37.165.131:8123",
    "http": "http://218.14.115.211:3128"
     }
     response = request.get(url=url, proxies=proxies) 
     - 私密代理
     proxy = {"http":"用户名:密码:代理地址:端口号"}
     请求的时候一样
### web 客户端的验证
- 针对于登录接口的请求
    - requests.get("接口",auth=('user','pass')) 
        - 需要对user ,pass 进行设置

### Cookies
- 对cookie 的获取
    - response = requests.get(url)
    - 返回cookiejar对象  
        - cookiejar = response.cookies
    - 将cookiejar 转换成字典
        - cookiedict = requests.utils.dict_from_cookiejar(cookiejar)
### 去求到页面出现乱码的解决办法
- response.encoding = response.apparent_encoding  
### session 
- session 对象代表依次对话: 从客户端对浏览器链接服务器开始,到客户端浏览器与服务器断开.
- 会话能让我们在请求时保持默写参数,比如在同一个session实例发出的所有请求之间保持cookie
    - 实例
    - 创建一个session 对象,可以保存cookie值
    session = requests.session()
    - 处理headers
    headers = {}
    - 创建data :内包含登录的用户名密码
    data = {"user":"用户名","password":"密码"}
    - 发起请求,并获取携带cookie的session 
    session.post(url=url, data=data,headers=headers)
    - session 对象被使用后自动携带cookie,即可使用session对只能登录后才能访问的页面进行访问
    response = session.get(url=url)
### ssl 