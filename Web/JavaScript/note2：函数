-.函数 高内聚，弱耦合
1.定义
函数或变量命名规则，小驼峰规则， 第一个首字母小写，其余的大写 theFirstName
函数声明
function theFirstName(){}

函数表达式
var test = function test(){
    document.write('a');
}
test.name = test

匿名函数表达式
var test = function(){
    document.write("a");
}
2.组成形式
形式参数 -- 形参
function sun(a, b){
    var c = a + b;
    document.write(c);
}
实际参数 -- 实参
sum(1, 2)

形参和实参的数量可以不等

arguments -- [11,2,3] 实参列表：
将所有的实际参数全部存放在实参列表中

function sum(a){
        for(var i = 0; i < arguments.length; i++){
            console.log(arguments[i])
        }
     }
sum(11, 2, 3);
sum.length   形参的长度
arguments.length  实参的长度

2.1 实现任意数求和函数

  function sum(){
            var result = 0;
            for(var i = 0; i < arguments.length(); i++ ){
                result += arguments[i];
            }
            console.log(result);
        }
  sum(1,2,3)

只有形参和实参数量相等的时候，形参和实参才能产生映射

2.2 返回值  return

2.3 习题
1.写一个函数，功能是告知你所选定的小动物的叫声。
     function screen(animals){
            switch(animals){
                case "dog":
                    document.write('狗');
                    return;
                case "cat":
                    document.write("猫");
                    return;
                case "fish":
                    document.write("游");
                    return;
            }
        }
        screen("cat");

2.写一个函数，实现加法基数器。
      function sum(a,b){
            var result = 0;
            for (var i = 0; i < arguments.length; i ++){
                result += arguments[i];
            }
            console.log(result);
        }
        sum(1, 3, 5, 7);


3.定义一组函数，输入数字，逆转并输出汉字形式。
        function reverse(){
            var num = window.prompt('input');
            var str = "";
            for(var i = num.length - 1;i>=0;i --){
                str += transfer(num[i]);
            }
            return str
        }
        function transfer(target){
            switch(target){
                case"1":
                    return "壹";
                case"2":
                    return "贰";
                case"3":
                    return "三";

            }
        }

    var a = reverse();
    console.log(a)

4.写一个函数实现n 的阶乘。
function factorial (num) {
    if (num < 0) {
        return -1;
    } else if (num === 0 || num === 1) {
        return 1;
    } else {
        for (var i = num - 1; i >= 1; i--) {
            num *= i;
        }
    }
    return num;
};

    function mul(n){
        var num = 1;
        for (var i=1; i <=n; i ++){
            num *= i;
        }
    }


5.写一个函数，实现斐波那契数列。
function Fabonacci(n){
            var sum1 = 1, sum2 = 1;
            for(var i=3; i <= n; i ++){
                sum = sum1 + sum2;
                sum1 = sum2;
                sum2 = sum;
            }
            return sum;
        }
        var fa = Fabonacci(6);
        console.log(fa);

2.4 javascript 字符串的底层是用数组写的
var str ="123";
str[0] = "1";

str.charAt(0) = "1";


3.递归

function jc(n){
    if (n == 1){
        return 1;
    }
    return n * jc(n - 1);
}


4,作用域问题
越里面的权限越高


作页

1.要求输入一串低于10位的数字，输出这串数字的中文大写
eg： input 100000   output:壹万
eg： input 1001010  output:壹佰万壹千壹拾



