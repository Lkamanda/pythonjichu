z1.遍历元素节点树（在原型链上编程）
2.封装函数返回元素e的第n层祖先元素节点
3.封装函数，返回元素e的第n个兄弟元素节点，n为后面的兄弟元素节点，n为负，返回前面，n为
0，返回自己的
4.编辑函数，封装myChildren功能,解决以前部分浏览器的兼容问题
5.自己封装hasChildren()方法，不可用children属性
- 新浪，58，淘宝



1.
        var div = document.getElementsByClassName('demo')[0],
            temp = {
                length: 0,
                push: Array.prototype.push,
                splice:Array.prototype.splice,
            }

        var test = function(e){
            for (var i=0;i< e.childNodes.length; i++){
               if(e.childNodes[i].nodeType === 1){
                    console.log(e.childNodes[i]);
                    temp.push(e.childNodes[i]);
               }
            }
            console.log(temp);
            return temp;
        }

2.
           var retParent = function(e, n){
            for(var i = 0; i < n; i++)
                e = e.parentElement;
            }
            return e;
        }


          function retParent(elem, n){
            while(elem && n){
                elem = elem.parentElement;
                n --;
            }
            return elem;
        }


3.

        function retSibling(e, n){
            while(e && n){
                if(n>0){
                    e = e.nextElementSibling;
                    n --;
                }else{
                    e = e.previousElementSibling;
                    n ++;
                }

            }
            return e;
        }

        var strong = document.getElementsByTagName("strong")[0];



        function retSibling(e, n){
            while(e && n){
                if(n>0){
                    if(0 && e.nextElementSibling){
                        e = e.nextElementSibling;

                    }else{
                        for(e = e.nextSibling; e && e.nodeType!= 1;e = e.nextSibling);
                    }
                    n --;
                }else{
                    if(e.previousElementSibling){
                        e = e.previousElementSibling;
                    }else{
                        for(e = e.previousSibling; e && e.nodeType != 1;e = e.nextSibling);
                    }
                    n ++;
                }

            }
            return e;
        }

        var strong = document.getElementsByTagName("strong")[0];

4.

<!--    children 方法的实现-->
        Element.prototype.myChildren = function(){
            var child = this.childNodes;
            var len = child.length;
            var arr = [];
            for (var i = 0; i < len; i++){
                if (child.nodeType == 1){
                    arr.push(child[i]);
                }
            }
            return arr;
        }
