一。1.浏览器组成
1）shell
2) 内核部分
- 渲染引擎（语法规则和渲染）
- js 引擎
- 其他模块
2.chrome v8引擎直接将js翻译成机械码
3.javascript ：
- 解释型语言：翻译一行执行一行
优点：跨平台
不足：稍微慢
- java：跨平台 javac -- > 编译 .class -- > jvm -- 解释执行 ock
编译型语言：通篇翻译，生成文件，执行文件，c c++
优点：快
不足：不能跨平台

1.javascript 引擎是单线程
2.异步：同时
3.ECMA标准

4.JavaScript：解释型，单线程
1）Dom
2）Bom
3）ecmascript : 原生的部分
- 轮转事件片
5.主流浏览器
IE         trident
Chrome     webkit/blink
firefox    Gecko
Opera      presto
Ssfari     webkit
6.js 使用
1.直接在html 中使用
    <script type="text/javascript">
        document.write("hello world")
</script>
2. 引入外部文件, (除非特殊需求， js全部写入外部文件)
   <script type="text/javascript"
            src="note.js"></script>

3. 结构，行为，样式 相分离
HTML， js css

二.js 基本语法：动态语言
1.var a : 声明变量
1）变量命名规则： （不能以数字开头， 不能有特殊字符）
- 变量名必须以英文字母、_、 $  开头
- 变量名可以包含英文字母、 _、 $、 数字
- 不可以用系统的关键字、保留字作为变量名
2）变量计算
先运算在赋值
3）数据类型：数据类型天生就是浮点型
- 原始值: number boolean string undefined(未定义的) null（占位）
- 引用值:array(数组类型)， object（对象类型），function... data regexp
- 由值决定类型

4）
stack: 栈  原始值存放在栈中 first in last out 先进后出
heap:  堆  引用值存放在堆中

5)js语法规则：
- 每条语句后家 ";"
- 函数后不加， for循环后不加， if(){}不加
- ， = + -/俩边应加空格

6）错误分俩种：
- 语法解析错误(低级错误）一行执行不了
- 逻辑错误

js 语法错误，一个代码块错误不会影响另一块代码执行，只会影响当前代码块

7)运算符

+ ： 加法，字符串拼接， 任意数据格式 + '字符串' = 字符串
- *
/ :
0/0 = NaN
1/0 = infinity  无穷 number
-1 / 0 = -infinity

% : 摩尔 取余
5 % 2 = 1

优先级 （） 最高 ， = 最低

++  --

a %= 2;  a 取模再赋值给自身
var a = 1
a = ++a + 1   先运行 ++ a
a += 1  a = a + 1

() 乘除 加减 += %=    =

< >
NaN 和任何东西都不相等

        var a = 123;
        var b = 234;
        a = a + b ;
        b = a - b;
        a = a - b
        document.write(a)
        document.write(b)


8) 逻辑运算符
&& || ! 与 或 非
并且 或者 
undefined , null, NaN ,"", 0 ,false  转换成布尔值都是false

- && ：可以起到中断做用

先看第一表达式转换成布尔值结果，如果结果为真，那么会看第二个表达式为布尔值的结果，
然后如果只有俩个表达式的话，只看到第二个表达式，就可以返回该表达式的值了。
（
俩个表达式的情况，
第一个为真，直接返回第二值
第一个为假，直接返回第一值，之后的不在关注
）
var a = 1 && 2 + 2
a = 4

var a = 0 && 2 + 2
a = 0

多个表达式是：
var a = 1 && 2 && 4
a = 4

var a = 1 && 0 && 3
a = 0

遇到假返回假，遇到真继续，知道最后一个表达式，返回最后一个值

var a = 1 + 1 && 1-1 ;
a = 0

短路语句， ajax传输
var data = ....;
data && 执行一个语句，会用到data

只有data 有意义的是时候才会调用


- || ： 遇到真返回 如果都为假，则返回最后一位
div.onclick = function(e){
    var event = e || window.event;
}

- ! : 把任何动东西转换成布尔值在取反

9)if (条件){
    如果条件为真，则执行括号中内容
}


10) for 循环
            for (var i=0; i < 10; i++){
                document.write('a')
            }

11)while 循环
while(条件){
    执行体
}
条件成立，执行执行体

12) do {} while() 不管如何都执行一次，再执行一次判断语句

do {
    document.write()
}while()

12） 习题
1.计算2的n次幂，n可能输入，n为自然数
2.计算n的阶乘，n可输入: n=5 n= 5*4*3*2*1
3.著名的斐波那契数列，
112358 输出第n项

4.编写一程序，输入一个三位数的正整数，输出时反向输出。
如：输入456，输出654

5.输入abc三个数字，打印出最大的
6.打印出100 以内的质数

（素数只能被1和自身整除的数：从1除的100）


1.求一个数的开方数
math.sqrt()
2.标准的输出方法
console.log()
传输到控制台
3.switch case

        var n = 3;
        switch(n){
            case 1:
                console.log("a");
            case 2:
                console.log('b');
            case 3:
                console.log("c");
        }
把switch（）中的内容与case 后的内容相比对，从那个case 开始执行。
一般和break 连用


continue 终止本次循环，执行下次循环

数组：

var a = [1,2,3,4,5,7]
a.length  数组长度
遍历数组：
for (var i = 0; i < a.length; i++){
    console.log(arr[i]);
}

13)对象
var a={
    age:22,
    son:"zhu",
}
获取对象属性值：
a.age
属性赋值 a.age = 10

14) typeof 操作符
typeof(12)
typeof 12
获取数据类型
number string boolean object undefined function

object : 范范的引用值，数组，null

15)类型转换
1.显示转换类型
- Number() 将其中的内容转换成数字
Number('123')
Number(null) = 0
Number(undefined) = NaN
Number(a) = NaN
Number(-123) = -123
Number(123abc) = NaN

- parseInt() 将其中的内容转换成整形， 从数字类开始往后看，到非数字类截止
var num = parseInt(demo, radix);
radix : 机理  (2  -  36)
以目标机理为进制，转换成10进制
parseInt(true) = NaN
parseInt(123.9) = 123
parseInt("a", 16) = 10
parseInt('123abc') = 123
parseInt('abc123') = NaN

- parseFloat() 将数转换成一个浮点数
