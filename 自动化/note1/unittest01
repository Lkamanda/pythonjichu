https://jspang.com/post/nginx.html
# Unittest 
- 1. 框架:
    - testcase, testsuit, testfixture, run, report 
- 2.每个testcase 继承unittest.TestCase类
    通过unittest.main(verbosity=n) 
        - n=0时:显示测试总数和全局结果
        - n=1时:显示e(测试代码错误)和f(断言不符合预期)
        - n=2时:执行所有测试用例
- 3.类方法
- 4.测试用例的执行顺序
    - ord() 小的先执行
- 5.把测试用例添加到测试集合中
    - suit = unittest.TestSuite()  // 生成类实例
      suit.addTest(F2('test_02'))
      unittest.TextTestRunner(verbosity=2).run(suit)
    - 先添加先执行
    
- 6.按测试类执行
    suite = unittest.TestSuite(unittest.makeSuite(F3))
    unittest.TextTestRunner(verbosity=2).run(suite)
- 7.按模块执行(即执行整个文件的所有测试类)
    suite=unittest.TestLoad().loadTestsFromModule('文件名')
    unittest.TextTestRunner(verbosity=2).run(suite)
- 8.1selenium常用操作
    - set_windows_size(x,y)   //设置窗口大小
    - set.back()              // 后退
    - driver.forward()        // 前进
    - driver.refresh()        // 刷新浏览器
    - driver.定位元素.submit() //提交表单
    - .size                   //返回元素的尺寸
    - .text                   //获取元素文本
    - .get_attribute(属性)    // 获取属性值, name,id
    - .is_displayed()        //该元素是否可见
- 8.2鼠标事件 ActionChains 类提供了鼠标操作方法
    - perform() 执行所有ActionChains中存储的行为
    - context_click() 右击
    - double_click()  双击
    - drag_and_drop()  拖动
    - move_to_element() 悬停
    
    - 例子
    from selenium.webdriver.common.action_chains import ActionChains
    from selenium import webdriver
    
    driver = webdriver.Chrome()
    driver.get('')
    //定位到右击元素
    right_element = driver.find_element_by("")
    // 对定位元素进行右击操作
    ActionChains(driver).context_click(right_click).perform()
- 9.忽略该用例
    - 使用装饰器:
    @unittest.skip('备注信息')
    - 预期测试用例失败:(该用例为error,输出ok)
    @unittest.exceptedFailure
- 10.异常的处理: 不要把if else try except放到测试层,对象层
- 判断页面元素是否可编辑:
    - 定位元素.is_enabled()
    
- 11.各种断言的使用(带补全)
    - assertIn()判断关键字是否在什么中
- 12.如何执行所有测试用例:   discover 关键字 
    suite = unittest.TestLoader().discover(
        start_dir=os.path.dirname(__file__),
        pattern='test_*.py',
        top_level_dir=None
    )